esp32:
  framework:
    sdkconfig_options:
      CONFIG_LWIP_SNTP_MAX_SERVERS: '3'

esphome:
  on_boot:
    then:
      - script.execute: sntp_updater_loop
      - script.execute: sntp_update_interval_setup

globals:
  - id: sntp_ac_interval
    type: float
    initial_value: "60 * 60" # 1h interval
    restore_value: True
  - id: sntp_battery_interval
    type: float
    initial_value: "NAN" # Don't update
    restore_value: True


external_components:
  - source: "github://asergunov/esphome_esphome@sntp"
    components:
      - sntp
    refresh: 0s

time:
  - platform: sntp
    id: sntp_component
    timezone: ${timezone}
    update_interval: 5min
    servers: 
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
      # - 192.168.2.1
      # - 224.0.1.1
      # - 192.168.1.1
    on_time_sync:
      then:
      - component.update: sntp_start_time_sensor
      - component.update: sntp_sync_time_sensor
      - component.update: sntp_sync_try_time_sensor
      - component.update: sntp_correction_abs_total
      - component.update: sntp_correction_total
      - component.update: sntp_uptime
      - component.update: sntp_sync_count
      - component.update: sntp_avg_correction
      - component.update: sntp_behind
      - logger.log: 
          level: INFO
          format: "SNTP Synchronized"

switch:
  # - platform: template
  #   name: SNTP Immediate Update
  #   entity_category: CONFIG
  #   restore_mode: RESTORE_DEFAULT_ON
  #   lambda: |
  #     if(!esp_sntp_enabled()) return {};
  #     return sntp_get_sync_mode() == SNTP_SYNC_MODE_IMMED;
  #   turn_on_action: 
  #     then:
  #       lambda: |
  #         if(!esp_sntp_enabled()) return;
  #         sntp_set_sync_mode(SNTP_SYNC_MODE_IMMED);
  #   turn_off_action: 
      then:
        lambda: |
          if(!esp_sntp_enabled()) return;
          sntp_set_sync_mode(SNTP_SYNC_MODE_SMOOTH);

script:
  - id: sntp_update_interval_setup
    mode: restart
    then: 
      - lambda: |
          const auto& value = id(ac_powered).state ? id(sntp_ac_interval) : id(sntp_battery_interval);
          id(sntp_component).set_update_interval(isnan(value) 
            ? 4294967295UL // Found in main.cpp. Magic never value?
            : uint32_t(value*1e3f));
  - id: sntp_updater_loop
    then:
      - while:
          condition:
            - lambda: return true;
          then:
            - if:
                condition: 
                  - or:
                      - not:
                          - time.has_time:
                      - lambda: |
                          const auto& interval = id(ac_powered) ? id(sntp_ac_interval) : id(sntp_battery_interval);
                          if(isnan(interval))
                            return false;
                          time_t now;
                          ::time(&now);
                          return now - kitchen_timer::sntp::sync_try_time > time_t(interval) + id(sntp_component).get_update_interval() + 20;
                then:
                  - lambda: |
                      kitchen_timer::sntp::force_sync_scheduled = true;
                  - component.update: sntp_component
            - wait_until:
                condition:
                  - lambda: return !kitchen_timer::sntp::force_sync_scheduled;
                timeout: !lambda |
                  return id(sntp_battery_sync_timeout).state * 1000;
            - if:
                condition:
                  - time.has_time:
                then: 
                  - lambda: |
                      if(kitchen_timer::sntp::force_sync_scheduled) {
                        kitchen_timer::sntp::force_sync_scheduled = false;
                        ::time(&kitchen_timer::sntp::sync_try_time);
                      }
            - delay: 1s

sensor:
  # - platform: template
  #   name: SNTP Sync interval
  #   entity_category: DIAGNOSTIC
  #   update_interval: 5s
  #   device_class: duration
  #   unit_of_measurement: s
  #   lambda: return 0.001f*sntp_get_sync_interval();
  - platform: template
    name: SNTP Behind
    id: sntp_behind
    update_interval: never
    accuracy_decimals: 3
    device_class: duration
    entity_category: diagnostic
    unit_of_measurement: ms
    lambda: |
      return kitchen_timer::sntp::has_behind_us 
        ? 0.001f /* us/ms */ * kitchen_timer::sntp::behind_us /* us */
        : NAN;
  - platform: template
    id: sntp_start_time_sensor
    name: SNTP Start
    entity_category: DIAGNOSTIC
    device_class: timestamp
    update_interval: never
    lambda: |
      if(kitchen_timer::sntp::first_sync_time)
        return kitchen_timer::sntp::first_sync_time;
      return NAN;
  - platform: template
    id: sntp_sync_time_sensor
    name: SNTP Sync
    entity_category: DIAGNOSTIC
    device_class: timestamp
    update_interval: never
    lambda: |
      if(kitchen_timer::sntp::prev_sync.tv_sec)
        return kitchen_timer::sntp::prev_sync.tv_sec;
      return NAN;
  - platform: template
    id: sntp_sync_try_time_sensor
    name: SNTP Try Sync
    entity_category: DIAGNOSTIC
    device_class: timestamp
    update_interval: never
    lambda: |
      return kitchen_timer::sntp::sync_try_time;
  - platform: template
    id: sntp_correction_abs_total
    name: SNTP Absolute Correction Total
    entity_category: diagnostic
    accuracy_decimals: 3
    unit_of_measurement: ms
    state_class: total_increasing
    update_interval: never
    lambda: |
      return float(kitchen_timer::sntp::correction_us_abs_total)/1000.0f;
  - platform: template
    id: sntp_correction_total
    name: SNTP Correction Total
    entity_category: diagnostic
    accuracy_decimals: 3
    unit_of_measurement: ms
    state_class: total
    update_interval: never
    lambda: |
      return float(kitchen_timer::sntp::correction_us_total)/1000.0f;
  - platform: template
    id: sntp_uptime
    entity_category: diagnostic
    name: SNTP Uptime
    accuracy_decimals: 0
    unit_of_measurement: s
    device_class: duration
    state_class: total_increasing
    update_interval: never
    lambda: |
      return kitchen_timer::sntp::first_sync_time == 0 
        ? NAN
        : float(kitchen_timer::sntp::prev_sync.tv_sec - kitchen_timer::sntp::first_sync_time);
  - platform: template
    id: sntp_sync_count
    entity_category: diagnostic
    name: SNTP Sync calls
    accuracy_decimals: 0
    state_class: total_increasing
    update_interval: never
    unit_of_measurement: '#'
    lambda: |
      return kitchen_timer::sntp::sync_count;
  - platform: template
    id: sntp_avg_correction
    entity_category: diagnostic
    name: SNTP Average Correction
    accuracy_decimals: 2
    unit_of_measurement: s/day
    state_class: measurement
    update_interval: never
    lambda: |
      if(kitchen_timer::sntp::first_sync_time == 0)
        return NAN;
      const auto uptime = kitchen_timer::sntp::prev_sync.tv_sec - kitchen_timer::sntp::first_sync_time;
      if(uptime == 0)
        return NAN;
      return float(kitchen_timer::sntp::correction_us_total) /* us */ * 1e-6f /*s/us*/ / float(uptime) /* s */ * 60.f /* s/m */ * 60.f /* m/h */ * 24.f /* h/d */;

binary_sensor:
  - platform: template
    name: SNTP Enabled
    entity_category: DIAGNOSTIC
    lambda: return esp_sntp_enabled();
    publish_initial_state: True  

text_sensor:
  - platform: template
    name: SNTP IP 1
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getserver(0);
      if(ret)
        return esphome::network::IPAddress(ret).str();
      return {};
  - platform: template
    name: SNTP IP 2
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getserver(1);
      if(ret)
        return esphome::network::IPAddress(ret).str();
      return {};
  - platform: template
    name: SNTP IP 3
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getserver(2);
      if(ret)
        return esphome::network::IPAddress(ret).str();
      return {};
  - platform: template
    name: SNTP Server 1
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getservername(0);
      if(ret) return {ret};
      return {};
  - platform: template
    name: SNTP Server 2
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getservername(1);
      if(ret) return {ret};
      return {};
  - platform: template
    name: SNTP Server 3
    update_interval: 5s
    entity_category: DIAGNOSTIC
    lambda: |
      auto&& ret = esp_sntp_getservername(2);
      if(ret) return {ret};
      return {};
button:
  - platform: template
    name: SNTP Sync now
    entity_category: config
    on_press:
      then:
        - component.update: sntp_component
number:
  - platform: template
    name: SNTP AC Sync Interval
    mode: box
    lambda: return id(sntp_ac_interval)/60.f;
    unit_of_measurement: min
    min_value: 0
    max_value: 10080 # week
    step: 1
    entity_category: CONFIG
    device_class: duration
    set_action: 
      then:
        - globals.set: 
            id: sntp_ac_interval
            value: !lambda |
              return 60.f*(x > 10079.0f ? NAN : x)*60.f;
        - script.execute: sntp_update_interval_setup
  - platform: template
    name: SNTP Battery Sync Interval
    mode: box
    lambda: return id(sntp_battery_interval)/60.f;
    unit_of_measurement: min
    min_value: 0
    max_value: 10080 # week
    step: 1
    entity_category: CONFIG
    device_class: duration
    set_action: 
      then:
        - globals.set: 
            id: sntp_battery_interval
            value: !lambda |
              return (x > 10079.0f ? NAN : x)*60.f;
        - script.execute: sntp_update_interval_setup
  - platform: template
    id: sntp_battery_sync_timeout
    name: SNTP Battery Sync Timeout
    mode: box
    optimistic: true
    unit_of_measurement: s
    min_value: 15
    max_value: 120
    step: 1
    entity_category: CONFIG
    device_class: duration
  - platform: template
    id: sntp_sync_interval_hours
    name: SNTP Sync Interval
    mode: box
    entity_category: CONFIG
    min_value: 0
    max_value: 48
    step: 0.01
    device_class: duration
    restore_value: True
    optimistic: True
    initial_value: 1
    unit_of_measurement: hour
    # lambda: |
    #   return id(sntp_component).get_update_interval()/1000.f/60.f/60.f;
    set_action: 
      then:
        - lambda: |
            id(sntp_component).set_update_interval(1000.f /* ms/s */ * 60.f /* s/m */ *60.f /* m/h */ * x /* h */ );