esp32:
  board: esp32-c3-devkitm-1
  # framework:
  #   type: arduino
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_PM_ENABLE: y
      # CONFIG_FREERTOS_USE_TICKLESS_IDLE: y
      # CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP: y
      # CONFIG_PM_USE_RTC_TIMER_REF: y
      # CONFIG_PM_DFS_INIT_AUTO: y

# Enable logging
logger:
  level: WARN # DEBUG

external_components:
  - source: "github://asergunov/esphome_esphome@rtttl_pm"
    components:
      - rtttl
    refresh: 0s
  - source: "github://asergunov/esphome_esphome@7digits_display_menu"
    components:
      - tm1637
      - lcd_menu_7segment
      - display_7segment_base
    refresh: 0s
  - source: "github://esphome/esphome@dev"
    components:
      - template
  - source: ./components
    components:
      - daily_signal
      - timer

substitutions:
  display_clk_pin: "21"
  display_dio_pin: "10"
  power_sawing_pin: "20"
  passive_buzzer_pin: "6"
  charging_current_pin: "3"
  rotary_encoder_a_pin: "7"
  rotary_encoder_b_pin: "4"
  rotary_encoder_button_pin: "2"
  battery_voltage_pin: "1"
  charging_pin: "5"
  fully_charged_pin: "0"
  timezone: "<+06>-6"
  timer_list_sound: "id(timer_1_sound), id(timer_2_sound)"
  timer_list: "id(timer_1_timer), id(timer_2_timer)"
  signal_list_sound: "id(signal_1_sound), id(signal_2_sound)"

esphome:
  name: kitchen-timer
  friendly_name: kitchen_timer
  # libraries:
  #   - esp_pm
  includes:
    - kitchen-timer.h
  platformio_options:
    board_build.f_cpu: 80000000L
    debug_tool: esp-builtin
    lib_ldf_mode: "chain+"
    build_type: debug
    board_build.flash_mode: dio
    # extra_scripts:
    #   - pre:../../../extra_script.py
  on_boot:
    priority: 1000
    then:
      - deep_sleep.prevent: deep_sleep_component
      - lambda: |
          setenv("TZ", "${timezone}", 1);
          tzset();
      - lambda: |
          const auto& names = get_song_name_list(id(songs));
          for(auto&& select: {
            ${signal_list_sound}, 
            ${timer_list_sound}
          }) {
            select->traits.set_options(names);
            select->set_initial_option(names[0]);
          }
      - lambda: |
          // App.set_loop_interval(500);

globals:
  - id: enable_sleeping
    type: bool
    initial_value: "false"
  - id: semicolon_on
    type: bool
    initial_value: "false"
  - id: recent_timers
    type: std::array<esphome::timer::seconds_type, 8>
    restore_value: True
    setup_priority: 1000
  - id: menu_recent_timer
    type: uint8_t
    initial_value: "0"
  - id: songs
    type: std::vector<std::string>
    restore_value: no
    initial_value: |-
      {
        "two_short:d=4,o=5,b=100:16e6,16e6",
        "Boop:d=4,o=5,b=250:c5",
        "Beep:d=4,o=5,b=250:c6",
        "BeepBeep:d=4,o=5,b=250:c6,p,c6",
        "NokiaTun:d=4,o=5,b=225:8e6,8d6,f#,g#,8c#6,8b,d,e,8b,8a,c#,e,2a",
        "long:d=1,o=5,b=100:e6",
        "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e",
        "scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b",
        "Thunderb:d=4,o=5,b=125:8g#5,16f5,16g#5,a#5,8p,16d#5,16f5,8g#5,8a#5,8d#6,16f6,16c6,8d#6,8f6,2a#5,8g#5,16f5,16g#5,a#5,8p,16d#5,16f5,8g#5,8a#5,8d#6,16f6,16c6,8d#6,8f6,2g6,8g6,16a6,16e6,g6,8p,16e6,16d6,8c6,8b5,8a.5,16b5,8c6,8e6,2d6,8d#6,16f6,16c6,d#6,8p,16c6,16a#5,8g#5,8g5,8f.5,16g5,8g#5,8a#5,8c6,8a#5,8g5,8d#5",
        "RightHer:d=4,o=5,b=125:8a,8b,8c6,8b,8d6,8c6,8b,8a,8g,8a,8b,8a,8c6,8b,8a,8g,8a,8b,8c6,8b,8d6,8c6,8b,8a,8g,8a,8b,8a,8c6,8b,8a,8b,8a,p,8a,8e,p,8b,8a,p,8a,8e",
        "SkippyTh:d=4,o=5,b=112:16f,16g,16a,a#,32p,16d,8c,p,16f,16a#,16a#,16a#,16a#,16p,16d,c,32p,16f,16a#,16a#,16a#,8a#,16d,16c,16p,16d,16d#,16p,16c,16d,8p,8f,16p,f.",
        "BevHills:d=4,o=5,b=160:f#,8a.,8f#,16f#,8a#,8f#,8e,f#,8c.6,8f#,16f#,8d6,8c#6,8a,8f#,8c#6,8f#6,16f#,8e,16e,8c#,8g#,f#.",
        "Elec6:d=16,o=5,b=180:8d.,p,d,p,f,p,g,p,f,p,32d,p.,32c#,p.,8c.,p,32c,p.,8a.4,p,32c,p.,32c#,p.,32c,p.,8d.,p,d,p,f,p,g,p,f,p,d,p,32c#,p.,8c.,p,32c,p.,8a.4,p,c,p,32c#,p.,32c,p.,8d.,p,d,p,f,p,g,p,f,p,d,p,32c#,p.,8c.,p,32c,p.,8a.4,p,c,p,32c#,p.,32c,p.,8d.,p,d,p,f,p,g,p,f,p,d,p,32c#,p.,8c.,p,32c,p.,8a.4,p,c,p,32c#,p.,32c,p.,8d.,p,d,p,f,p,g,p,f,p,d,p,32c#,p.,8c.,p,32c,p.,8a.4,p,c,p,32c#,p.,32c",
        "MontyPython:d=4,o=5,b=200:32p,f6,8e6,d6,8c#6,c6,8b,a#,8a,8g,8a,8a#,a,8g,2c6,8p,8c6,8a,8p,8a,8a,8g#,8a,8f6,8p,8c6,8c6,8p,8a,8a#,8p,8a#,8a#,8p,8c6,2d6,8p,8a#,8g,8p,8g,8g,8f#,8g,8e6,8p,8d6,8d6,8p,8a#,8a,8p,8a,8a,8p,8a#,2c6,8p,8c6",
        "PiratesTheme:d=4,o=6,b=200:8d,8e,2f,8g,8a,g,f,e,f,g,a,g,p,8f,8g,a,p,8g,8f,e,f,e,d,p,8e,8c,d,8p,p,8d,8e,f,p,8e,8f,g,f,g,a,g,f,d",
        "Twilight:d=16,o=7,b=285:a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,8p,a#,a,8p,a#,g#,8p,a#,e,8p,a#,g#,b5,c#6,b5,c#6,b5,c#6,b5,c#6,b5,c#6,b5,d6,a#5,d6,a#5,d#6,a5,2p.,g6,a#6,d#,e,c#,e,d#,a#6,g#6,a#6,e,g#,e,a#",
        "XFiles1:d=4,o=5,b=125:e,b,a,b,d6,2b.,1p,e,b,a,b,e6,2b.,1p,g6,f#6,e6,d6,e6,2b.,1p,g6,f#6,e6,d6,f#6,2b.,1p,e,b,a,b,d6,2b.,1p,e,b,a,b,e6,2b.,1p,e6,2b.",
        "MissionTheme:d=4,o=5,b=112:16g6,8p,16g6,8p,16f6,16p,16f#6,16p,16g6,8p,16g6,8p,16a#6,16p,16c7,16p,16g6,8p,16g6,8p,16f6,16p,16f#6,16p,16g6,8p,16g6,8p,16a#6,16p,16c7,16p,16a#6,16g6,2d6,32p,16a#6,16g6,2c#6,32p,16a#6,16g6,2c6,16p,16a#,16c6"
        "Pacman:d=32,o=5,b=112:32p,b,p,b6,p,f#6,p,d#6,p,b6,f#6,16p,16d#6,16p,c6,p,c7,p,g6,p,e6,p,c7,g6,16p,16e6,16p,b,p,b6,p,f#6,p,d#6,p,b6,f#6,16p,16d#6,16p,d#6,e6,f6,p,f6,f#6,g6,p,g6,g#6,a6,p,b.6",
        "Druid:d=4,o=5,b=80:8g.6,16a6,16a#6,16g6,c7,8a#6,16a6,16a#6,a6,g6,8p,8g.6,16a6,16a#6,16g6,c7,8a#6,16a6,16a#6,c7,d7,8p,8d.7,16d#7,16d7,16d#7,d7,8c7,16a#6,16c7,a6,g6,8p,8g.6,16a6,16a#6,16g6,c7,8a#6,16a6,16a#6,8a6,8f6,g6",
        "Lemmings:d=4,o=5,b=140:f#6,8f#.6,16f#6,8f#.6,16e6,d6,f#6,8f#.6,16f#6,16f#.6,16g6,16f#.6,e6,f#6,8f#.6,16f#6,8f#.6,16g6,a6,1c#6,b,8b.,16b,8b.,16c#6,d6,c#6,8c#.6,16c#6,8c#.6,16d6,e6,a6,f#6,d6,a,1e6",
        "MagicPockets:d=4,o=5,b=112:8f#6,8c#6,p,8c#6,8d#6,8c#6,8e6,8p,8d#6,16p,8c#6,16p,8c#6,8d#6,8c#6,8f#6,8c#6,p,8c#6,8d#6,8c#6,8e6,8p,8d#6,16p,8c#6,16p,8c#6,8d#6,8c#6,8a#.6,8f#.6,8c#6,8d#.6,8f#.6,8g#6,8a#.6,8f#.6,8c#6,8d#.6,8f#.6,8g#6,2a#6,8d#.6,8f#.6,8g#6,a.6,8g#6,16f#6,16d#6,c#6",
        "RickD:d=4,o=5,b=160:16f#4,f#4,f#,c#.,16a#4,b4,c#,d#.,16c#,c#,g#,f.,16c#,d#,f,f#.,16f#4,f#4,f#,c#.,16a#4,b4,c#,2d#,a,p,b,p,a#4,c#,2f#4",
        "c64_bjack:d=4,o=5,b=225:f6,g#6,g#6,8c#7,8d#7,f7,c#7,2c#7,f6,g#6,g#6,8c#7,8f7,f7,d#7,2d#7,f6,g#6,g#6,8f7,8g#7,g#7,f#7,2f#7,g#7,f#7,f7,d#7,c#7,c7,a#6,c7,1c#7",
        "Comicb:d=4,o=5,b=125:8g,16g,16g,16f6,16g6,16g,16g,8g,16g,16g,16f6,16g6,16g,16g,8a#,16a#,16a#,16g#6,16a#6,16a#,16a#,8f,16f,16f,16d#6,16f6,16f,16f,8g,16g,16g,16f6,16g6,16g,16g,8g,16g,16g,16f6,16g6,16g,16g,8a#,16a#,16a#,16g#6,16a#6,16a#,16a#,8c6,16c6,16c6,16a#6,16c7,16c6,16c6",
        "WormSong:d=4,o=5,b=112:g,a,b.,8d6,d6,8c6,8b,8a.,16g,8a,8b,2a,32p,8a.,16g,8a,8b,2e,32p,8a.,16g,8a,8b,a,8g,8a,b.,8d6,d6,8c6,8b,8a.,16g,8a,8b,2a,32p,8a.,16g,8a,8b,2e,32p,8a.,16g,8a,8b,a",
        "Flimboq1:d=4,o=5,b=125:16c#6,16d6,16a#,16p,16a#,16p,16a#,16p,8a#,16p,16a#,8p,16a#,16p,16c#6,16d6,16a#,16p,16a#,16p,16a#,16p,8d.6,c6,8p,16c#6,16d6,16a#,16p,16a#,16p,16a#,16p,8a#,16p,16a#,8p,16a#,16p,8g,16a#,16p,8g,f.,p,16c#6,16d6,16a#,16p,16a#,16p,16a#,16p,8a#,16p,16a#,8p,16a#,16p,8d6,8c6,8a#,c6,8a#,8c6,8a#,8d6,8f6,8d6,8f6,8d6,8c6,8a#,8g,8f,8g,8a#,a#",
        "GoldenAxe:d=4,o=5,b=112:8a4,32p,16b4,16p,2c,16p,8a4,32p,16b4,16p,2c,16p,8b4,32p,16c,16p,d,32p,8g.4,16c,16b4,2a4",
        "Giana:d=4,o=5,b=125:8g,8g,8a,8g,8a#,8g,8a,8g,8g,8g,8c6,8g,8a#,8g,8a,8g,8g,8f,8a,8f,8a#,8f,8c6,8f,8d6,8f,8c6,8f,8a#,8f,8a,8f,8g,8d#,8a,8d#,8a#,8d#,8a,8d#,8g,8d#,8c6,8d#,8a#,8d#,8a,8d#,8f#,8d,8g,8d,8a,8d,8a#,8d,8c6,8d,8d6,8d,8a#,8d,8a,8d",
        "Krakout:d=4,o=4,b=160:16b,16p,16b5,16p,16d#5,16p,16b5,16p,16e5,16p,16e6,16p,16e6,16p,c#5,16f6,16p,16f5,16p,16f6,16p,16f#5,16p,16f#6,16p,8f#.6,16p,16b,16p,16b5,16p,16d#5,16p,16b5,16p,16e5,16p,16e6,16p,16e6,16p,c#5,16f6,16p,16f5,16p,16f6,16p,16f#5,16p,16f#6,16p,8f#.6,16p",
        "Lotus:d=4,o=5,b=100:16c6,16c6,16c6,8a#,8c6,16a#,8g#,8c6,8g,8a#,16c6,16c6,16c6,8a#,8c6,16a#,8g#,8c6,8g,8d#6",
        "GBusters:d=4,o=5,b=112:16b,16b,8d#6,8b,8c#6,8a,2p,16b,16b,16b,16b,8a,8b,2p,16b,16b,8d#6,8b,8c#6,8a,2p,16b,16b,16b,16b,8a,8c#6,8b",
        "outrun_magic:d=4,o=5,b=160:f6,d#6,8g#.6,f6,d#6,8c#.6,d#6,c6,2g#.,c#6,c6,8d#.6,c#6,c6,8f.,a#,16c.6,1a#,f6,d#6,8g#.6,f6,d#6,8c#.6,d#6,c6,2g#.,c#6,c6,8d#.6,c#6,c6,16f.,16g#.,c6,2a#.",
        "Popeye:d=4,o=5,b=140:16g.,16f.,16g.,16p,32p,16c.,16p,32p,16c.,16p,32p,16e.,16d.,16c.,16d.,16e.,16f.,g,8p,16a,16f,16a,16c6,16b,16a,16g,16a,16g,8e,16g,16g,16g,16g,8a,16b,32c6,32b,32c6,32b,32c6,32b,8c6",
        "RainbowIslands:d=4,o=5,b=125:c,8p,c6,8p,8b.,8g,16a,8b,8c6,16p,a,8f,16g,8a,8g#.,2g,8p,16g,8f,16g,8f,16e,8d,8g,16p,e,8c,16d,8e,8f,8p,8d,16p,8e,16p,8f,16p,8f#,g",
        "BubbleBobble:d=4,o=5,b=125:8a#6,8a6,8g.6,16f6,8a6,8g6,8f6,8d#6,8g6,8f6,16d#6,8d.6,f.6,16d6,16c6,8a#,8c6,8d6,8d#6,8c6,16d6,8d#.6,8f6,8f6,8g6,16a6,8g.6,8f6,8f6,8g6,8a6,8a#6,8a6,8g.6,16f6,8a6,8g6,8f6,8d#6,8g6,8f6,16d#6,8d.6,f.6,16d6,16c6,8a#,8c6,8d6,8d#6,8c6,16d6,8d#.6,8f6,8f6,8g6,16a6,8f.6,8a#.6",
        "Rambo:d=4,o=5,b=125:16f#4,16f#,16c#,16b4,2c#.,16a4,b4,2f#.4,16f#4,16f#,16c#,16b4,2c#.,8f#,8e.,16f#,2e.,16f#4,16f#,16c#,16b4,2c#.,16a4,b4,2f#.4,16f#4,16f#,16c#,16e,b.4,8c#,8b.4,16a4,2b4",
        "StreetRod:d=4,o=5,b=125:16f#4,16a#4,16b4,16c#,8f#,8f#,16p,8f#,16p,16f#4,16a#4,16b4,16c#,8f#,8f#,16p,8a,16p,16f#4,16a#4,16b4,16c#,16f#,16f#,16f#,16e,16e,16e,16d#,16d#,16d#,16d,16d,16d,8c#,8c#,16p,8c#,16p,16a#4,8b4,16a#4,8f#4,16a#4,8c#,16f#4,8a#4,16c#,8f#4,16a#4,8c#,16f#4,8a#4,8c#,p,8f#4,16a#4,8c#,16f#4,8a#4,16c#,8f#4,16a#4,8c#,16f#4,8a#4,8e,16p,16e,8d#,16c#,8b4,16d#,8f#,16b4,8d#,16f#,8b4,16d#,8f#,16b4,8d#,8f#,p,8f#4,16a#4,8c#,16f#4,8a#4,16c#,8f#4,16a#4,8c#,16f#4,8a#4,8e,16p,16e,8d#,16c#",
        "BTTF:d=4,o=5,b=160:32p,p,8c.,16p,g,16p,16c.6,16p,a#.,16p,16a,16p,16g,16p,8a,16p,8g,16p,8f,16p,1g.,1p,g.,16p,c.,16p,2f#.,16p,32g.,32p,32a.,32p,8g,32p,8e,32p,8c,32p,f#,16p,32g.,32p,32a.,32p,8g.,32p,8d.,32p,8g.,32p,8d.6,32p,d6,16p,c#6,16p,32b.,32p,32c#.6,32p,2d6",
        "Indiana:d=4,o=5,b=250:e,8p,8f,8g,8p,1c6,8p.,d,8p,8e,1f,p.,g,8p,8a,8b,8p,1f6,p,a,8p,8b,2c6,2d6,2e6,e,8p,8f,8g,8p,1c6,p,d6,8p,8e6,1f.6,g,8p,8g,e.6,8p,d6,8p,8g,e.6,8p,d6,8p,8g,f.6,8p,e6,8p,8d6,2c6",
        "A-Team:d=8,o=5,b=125:4d#6,a#,2d#6,16p,g#,4a#,4d#.,p,16g,16a#,d#6,a#,f6,2d#6,16p,c#.6,16c6,16a#,g#.,2a#",
        "Axel-F:d=4,o=5,b=125:g,8a#.,16g,16p,16g,8c6,8g,8f,g,8d.6,16g,16p,16g,8d#6,8d6,8a#,8g,8d6,8g6,16g,16f,16p,16f,8d,8a#,2g,p,16f6,8d6,8c6,8a#,g,8a#.,16g,16p,16g,8c6,8g,8f,g,8d.6,16g,16p,16g,8d#6,8d6,8a#,8g,8d6,8g6,16g,16f,16p,16f,8d,8a#,2g",
        "OutrunSplash:d=4,o=5,b=160:8d#,8a#,8d#6,8d#,8a#,8d#6,8d#,8a#,8d#6,8d#,8a#,8d#6,8d#,8a#,8d#6,8a#,8c#,8g#,8c#6,8c#,8g#,8c#6,8c#,8c#6,16c#.4,16g#.4,16c#.,16d.4,16a.4,16d.,16d#.4,16a#.4,16d#.,16e.4,16b.4,16e.,16f.4,16c.,16f.,16f#.4,16c#.,16f#.,16g.4,16d.,16g.,16g#.4,16d#.,16g#.,2c#.,8f#,32a#,b.,a#,8g#,a#,1e,32d#7,e.6,d#6,8c#6,d#6,1a#,32c6,c#6,b,2a#.,32f,16f#.,1d#,1e,32f#,32g,g#,8b,a#,g#,8f#,1d#,32f,f#,8a#,g#,1a,32c#6,d6,1c#6,8b,32c6,1c#6",
        "OutrunBreeze:d=4,o=5,b=125:1f#,16b,16a,2g#,8a,8g#,1f#,2g#,8e,1f#,p,8a,8g#,16f#,16e,2f#,a,8b,2g#,f#,e,1f#,8a,8g#,16f#,16e,2f#,g#,8a,2b,32c6,8c#6,e6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,8a6,16g#6,16f#6,16a6,8b6,8a6,16g#6,1f#6",
        "FlimBoq:d=4,o=5,b=160:8g,8b,8p,8d6,8p,8g6,8p,e6,8c6,8p,g,8e,8f#,8g,8f#,8g,8p,8a,8p,8d6,8p,c6,8b,8a,b,8g,8d,8f#,8g,8b,8p,8d6,8p,8g6,8p,a6,8e6,8p,c6,8g,8c6,8g6,8f#6,e6,d6,f#6,g.6",
        "star_wars:d=16,o=5,b=100:4e,4e,4e,8c,p,g,4e,8c,p,g,4e,4p,4b,4b,4b,8c6,p,g,4d#,8c,p,g,4e,8p",
        "mission_imp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d",
        "mario:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6",
      }

# debug:
#   update_interval: 10s

api:
  encryption:
    key: !secret kitchen_timer.api.encryption

ota:
  password: !secret kitchen_timer.ota.password
  on_begin:
    then:
      - switch.turn_off: power_saving
  on_error:
    then:
      - switch.turn_on: power_saving

packages:
  signal1: !include
    file: .kitchen-timer_signal.yaml
    vars:
      index: 1
  signal2: !include
    file: .kitchen-timer_signal.yaml
    vars:
      index: 2
  timer1: !include
    file: .kitchen-timer_timer.yaml
    vars:
      index: 1
  timer2: !include
    file: .kitchen-timer_timer.yaml
    vars:
      index: 2

deep_sleep:
  id: deep_sleep_component
  run_duration: 1000ms
  sleep_duration: 5000ms

wifi:
  id: wifi_component
  power_save_mode: HIGH
  # enable_on_boot: False
  # fast_connect: True
  networks:
    - ssid: !secret parents.wifi_ssid
      password: !secret parents.wifi_password
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Kitchen-Timer Fallback Hotspot"
#     password: "yOuGK5OiGnhg"

# captive_portal:

web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time
    timezone: ${timezone}
    on_time:
      seconds: /1
      minutes: /1
      then:
        - lambda: "id(semicolon_on) = !id(semicolon_on);"
        - component.update: tm1637_display
        - script.execute: tick_sound

switch:
  - platform: gpio
    id: power_saving
    restore_mode: ALWAYS_ON
    name: Power Saving
    pin:
      number: ${power_sawing_pin}
      inverted: True
  - platform: template
    optimistic: True
    name: Display Flip
    id: display_flip
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |
            id(tm1637_display).set_inverted(true);
        - component.update: tm1637_display
    on_turn_off:
      then:
        - lambda: |
            id(tm1637_display).set_inverted(false);
        - component.update: tm1637_display
  - platform: template
    name: Display Intensity Auto
    id: auto_brightness_switch
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      then:
        - number.set:
            id: display_intensity_number
            value: !lambda return id(desired_display_intensity).state;
  - platform: template
    id: ticking_switch
    name: Tick Sound
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF

output:
  - platform: ledc
    id: rtttl_out
    pin:
      number: ${passive_buzzer_pin}
      inverted: False

rtttl:
  output: rtttl_out
  id: my_rtttl

i2c:
  - sda: 8
    scl: 9

script:
  - id: rotary_click
    mode: queued
    then:
      - if:
          condition: rtttl.is_playing
          else:
            - output.set_level:
                id: rtttl_out
                level: "100%"
            - output.turn_on: rtttl_out
            - delay: 1ms
            - output.turn_off: rtttl_out
            - delay: 1ms
  - id: tick_sound
    mode: single
    then:
      - if:
          condition:
            - switch.is_on: ticking_switch
          then:
            - if:
                condition: rtttl.is_playing
                else:
                  - delay: 1ms
                  - output.set_level:
                      id: rtttl_out
                      level: "100%"
                  - output.turn_on: rtttl_out
                  - delay: 1ms
                  - output.turn_off: rtttl_out

sensor:
  - platform: rotary_encoder
    id: encoder
    name: Encoder Position
    pin_a:
      inverted: True
      number: ${rotary_encoder_a_pin}
    pin_b:
      inverted: True
      number: ${rotary_encoder_b_pin}
    on_anticlockwise:
      - if:
          condition:
            display_menu.is_active:
          then:
            - display_menu.down:
          else:
            - display_menu.show_main:
    on_clockwise:
      - if:
          condition:
            display_menu.is_active:
          then:
            - display_menu.up:
          else:
            - display_menu.show_main:
    on_value:
      then:
        - script.execute: rotary_click

  - platform: veml7700
    id: light_sensor
    address: 0x10
    update_interval: 0.5s
    # short variant of sensor definition:
    ambient_light:
      id: ambient_light_sensor_fast
      name: Light Ambient Fast
      internal: True

    infrared:
      name: Light Infrared
      filters:
        - throttle: 5s
    full_spectrum:
      name: Light Full spectrum
      filters:
        - throttle: 5s

  - platform: copy
    name: Light Ambient
    source_id: ambient_light_sensor_fast
    filters:
      - throttle: 5s

  - platform: copy
    source_id: ambient_light_sensor_fast
    id: desired_display_intensity
    internal: True
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 0 -> 0.
            - 10 -> 0.
            - 80 -> 1.
            - 140 -> 2.
            - 300 -> 3.
            - 2000 -> 7.
      - lambda: "return ceil(x);"
      - clamp:
          max_value: 7
          min_value: 0
      - delta: 0.1% # to prevent publishing non-changed values

    on_value:
      then:
        - if:
            condition:
              - switch.is_on: auto_brightness_switch
            then:
              - number.set:
                  id: display_intensity_number
                  value: !lambda return x;

  - platform: adc
    pin: ${battery_voltage_pin}
    attenuation: 11db
    accuracy_decimals: 4
    update_interval: 1s
    id: battery_voltage_unfiltered
    name: Devider Voltage Unfiltered
    entity_category: diagnostic
    internal: True
    filters:
      - lambda: |
          auto value = x*1.89764693-0.09737394839;
          // if(id(charging_sensor).state)
          //   value -= 0.15;
          return value;
  - platform: copy
    source_id: battery_voltage_unfiltered
    id: battery_voltage
    name: Battery Voltage
    accuracy_decimals: 4
    entity_category: diagnostic
    filters:
      - lambda: |
          if(id(charging_sensor).state)
            return {};
          return x;
      - exponential_moving_average:
          alpha: 0.1
          send_every: 5
  - platform: copy
    source_id: battery_voltage
    name: Battery
    device_class: battery
    unit_of_measurement: "%"
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 2.44 -> 0.0
            - 2.45 -> 0.01
            - 2.48 -> 0.02
            - 2.54 -> 0.06
            - 2.65 -> 0.11
            - 2.75 -> 0.18
            - 2.86 -> 0.31
            - 2.975 -> 0.6
            - 3.023 -> 0.79
            - 3.123 -> 1.29
            - 3.25 -> 2.26
            - 3.372 -> 3.87
            - 3.439 -> 5.44
            - 3.462 -> 7.01
            - 3.833 -> 39.42
            - 3.922 -> 57.1
            - 4.032 -> 72.4
            - 4.153 -> 97.53
            - 4.2 -> 100.

  - platform: adc
    name: Power Charging Current
    pin: ${charging_current_pin}
    device_class: current
    id: charging_current_fast
    attenuation: auto
    unit_of_measurement: mA
    update_interval: 5s
    filters:
      - lambda: |
          if(id(charging_sensor).state)
            return x / 1000 /*Ohm*/ * 1200 * 1000 /*mA/A*/;
          return 0.0;

binary_sensor:
  - platform: gpio
    id: encoder_button
    name: Encoder Button
    pin:
      number: ${rotary_encoder_button_pin}
      inverted: True
    on_click:
      then:
        - if:
            condition:
              display_menu.is_active:
            then:
              - display_menu.enter:
            else:
              - display_menu.show_main:
    on_multi_click:
      - timing:
          - ON for at least 2s
        then:
          - display_menu.hide
  - platform: gpio
    name: Power Charging
    id: charging_sensor
    pin:
      number: ${charging_pin}
      inverted: True
      mode:
        input: True
        pullup: True
  - platform: gpio
    name: Power Fully Charged
    id: fully_charged
    pin:
      number: ${fully_charged_pin}
      inverted: True
      mode:
        input: True
        pullup: True
  - platform: template
    name: Power AC
    id: ac_powered
    lambda: |
      return id(fully_charged).state || id(charging_sensor).state;

text:
  - platform: template
    name: Sound Add
    id: rtttl_text
    optimistic: true
    mode: text
    restore_value: True
    initial_value: "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e"

button:
  - platform: restart
    name: Restart device
    entity_category: config
  - platform: template
    name: Sleep for 5 seconds
    on_press:
      then:
        - deep_sleep.enter:
            id: deep_sleep_component
            sleep_duration: 5s
  - platform: template
    name: Sound Play
    on_press:
      then:
        - if:
            condition: rtttl.is_playing
            then:
              - rtttl.stop:
            else:
              - rtttl.play: !lambda |
                  // boomer:d=4,o=2,b=125:8e2,4g2,2p,8g2,4e2,2p,8a2,8g2,8a2,8g2,8a2,8g2,8a2,8g2,8a2,4b2,2p
                  // boomer:d=4,o=2,b=125:8e2,4g2.,2p-,8g2,4e2.,2p-,8a2,8g2,8a2,8g2,8a2,8g2,8a2,8g2,8a2,4b.,2p-
                  return id(rtttl_text).state;

number:
  - platform: template
    name: Display Intensity
    id: display_intensity
    max_value: 7
    min_value: -1
    step: 1
    update_interval: 1s
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - if:
            condition: 
              - number.in_range: 
                  id: display_intensity
                  below: 0
            then:
              - switch.turn_on: auto_brightness_switch
            else:
              - switch.turn_off: auto_brightness_switch
              - number.set:
                  id: display_intensity_number
                  value: !lambda "return x;"
  - platform: template
    name: Raw Display Intensity
    id: display_intensity_number
    max_value: 7
    min_value: -1
    step: 1
    update_interval: 1s
    optimistic: True
    on_value:
      then:
        - lambda: |
            id(tm1637_display).set_on(int(x) != -1);
            id(tm1637_display).set_intensity(max(0, int(x)));
            id(tm1637_display).update();
  - platform: template
    name: Sound Gain
    max_value: 100
    min_value: -100
    step: 1
    optimistic: True
    on_value:
      then:
        - lambda: |
            id(my_rtttl).set_gain(0.01*x);

lcd_menu_7segment:
  id: main_menu
  mode: rotary
  active: false
  items:
    - type: menu
      text: "ТАйМЕР"
      items:
      - type: custom
        text: "СТАРТ"
        value_lambda: |
          if(id(menu_recent_timer) < id(recent_timers).size())
            return timer_value_string(id(recent_timers)[id(menu_recent_timer)]);
          else
            return timer_value_string(*menu_fibonacci_iterator);
          return "НОВЫЙ";
        on_enter:
          then:
            lambda: |
              id(menu_recent_timer) = id(recent_timers)[id(menu_recent_timer)] == 0 ? 0xff : 0;
              menu_fibonacci_iterator = TimerValueIterator{};
        # on_leave:
        on_next:
          then:
            lambda: |
              auto& i = id(menu_recent_timer);
              if(i == 0xff) {
                ++menu_fibonacci_iterator;
              } else {
                const auto& vec = id(recent_timers);
                auto next = id(menu_recent_timer) + 1;
                if(next < vec.size() && vec[next] != 0) {
                  i = next;
                } else {
                  i = 0xff;
                }
              }

        on_prev:
          then:
            lambda: |
              const auto& vec = id(recent_timers);
              if(id(menu_recent_timer) == 0xff) {
                if(menu_fibonacci_iterator == TimerValueIterator{}) {
                  auto i = std::find_if(
                    vec.rbegin(),
                    vec.rend(),
                    [](const esphome::timer::seconds_type& item){ return item != 0; });
                  if(i != vec.rend()) {
                    id(menu_recent_timer) = std::distance(vec.begin(), i.base() - 1);
                  }
                } else {
                  --menu_fibonacci_iterator;
                }
              } else if(id(menu_recent_timer) > 0) {
                id(menu_recent_timer)--;
              }

      - type: back
        text: НАЗАД
    - type: number
      id: brightness_menu_item
      text: 'ЯРКОСТЬ'
      immediate_edit: false
      value_lambda: |
        std::string result = "Auto";
        const auto& x = id(display_intensity).state;
        if(x >= 0) {
          result.clear();
          for(int i = 0; i < 4; ++i) {
            result.push_back('0'+x);
          }
        }
        return result;
      number: display_intensity
    - type: switch
      id: turn_menu_item
      text: 'ПОВОРОТ'
      immediate_edit: false
      on_text: '12.34'
      off_text: '12.34'
      switch: display_flip
    - type: switch
      id: sound_menu_item
      text: ЗВУК
      on_text: 'On'
      off_text: 'OFF'
      switch: ticking_switch
    - type: command
      text: НАЗАД
      on_value:
        then:
          - display_menu.hide:
          - component.update: tm1637_display

display:
  platform: tm1637
  id: tm1637_display
  clk_pin: ${display_clk_pin}
  dio_pin: ${display_dio_pin}
  inverted: false
  length: 4
  update_interval: never
  intensity: 7
  lambda: |-
    if (id(main_menu).is_active()) {
      id(main_menu).draw();
      return;
    }

    optional<uint32_t> smallest_timer;
    for(const auto& timer : {${timer_list}}) {
      const auto& remain = timer->get_seconds_remain();
      if(!remain) {
        continue;
      }
      if(!smallest_timer) {
        smallest_timer = remain;
        continue;
      }

      smallest_timer = std::min(*smallest_timer, *remain);
    }

    if(smallest_timer) {
      it.printf("%s", timer_value_string(*smallest_timer).c_str());
      return;
    }

    auto && wifi = id(wifi_component);
    if(!wifi->is_disabled() && !wifi->is_connected()) {
      it.print("WIFI");
      return;
    }

    if (id(semicolon_on))
      it.strftime("%H.%M", id(sntp_time).now());
    else {
      it.strftime("%H%M", id(sntp_time).now());
      // ESP_ERROR_CHECK(esp_sleep_enable_timer_wakeup(5000*1000));
      // ESP_ERROR_CHECK(esp_sleep_enable_gpio_wakeup());
      // App.run_safe_shutdown_hooks();
      // adc_power_off();
      // ESP_ERROR_CHECK(esp_light_sleep_start());
    }


    // id(deep_sleep_component).allow_deep_sleep();

    // id(tm1637_display).update();

    // id(deep_sleep_component).set_sleep_duration(500);
    // id(deep_sleep_component).begin_sleep(false);

    if(id(enable_sleeping)) {
      // App.run_safe_shutdown_hooks();
      // for(const auto& gpio: std::initializer_list<gpio_num_t>{ GPIO_NUM_10, GPIO_NUM_21, GPIO_NUM_20 }) {
      //  ESP_ERROR_CHECK(gpio_wakeup_enable(gpio, GPIO_INTR_LOW_LEVEL));
      //}
      //ESP_ERROR_CHECK(esp_sleep_enable_timer_wakeup(60*1000*1000));
      //ESP_ERROR_CHECK(esp_sleep_enable_gpio_wakeup());
      //ESP_ERROR_CHECK(esp_light_sleep_start());

    }
