# cSpell:words bootloader datapoints useconds veml
# cSpell:ignore GDBSTUB CRYS LWIP НАЗА wdtc setenv tzset nullptr isnan getserver getservername ledc preshared keepalive rbegin ПОВО СЕРВ ВСЕГ spect
esp32:
  board: esp32-c3-devkitm-1
  # framework:
  #   type: arduino
  framework:
    type: esp-idf
    # platform_version: 6.5.0
    # platform_version: 6.5.0 # 6.7.0 # need to bump it for latest version
    # version: latest # recommended
    sdkconfig_options:
      # CONFIG_ESP_SYSTEM_PANIC_GDBSTUB: y
      CONFIG_PM_ENABLE: y
      # CONFIG_FREERTOS_USE_TICKLESS_IDLE: y
      CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP: y
      # CONFIG_PM_USE_RTC_TIMER_REF: y
      # CONFIG_PM_DFS_INIT_AUTO: y
      # CONFIG_ESP_INT_WDT: n
      CONFIG_ESP32C3_RTC_CLK_SRC_EXT_CRYS: y
      CONFIG_ESP32C3_RTC_CLK_CAL_CYCLES: '5000'
      CONFIG_BOOTLOADER_SKIP_VALIDATE_IN_DEEP_SLEEP: y

external_components:
  - source: "github://asergunov/esphome_esphome@7digits_display_menu"
    components:
      - tm1637
      - lcd_menu_7segment
      - display_7segment_base
    refresh: 0s
  - source: "github://asergunov/esphome_esphome@dev"
    components:
      - template
    refresh: 0s
  - source: ./components
    components:
      - daily_signal
      - timer

substitutions:
  display_clk_pin: "21"
  display_dio_pin: "10"
  power_sawing_pin: "20"
  passive_buzzer_pin: "6"
  charging_current_pin: "4" # ADC1
  rotary_encoder_a_pin: "18"
  rotary_encoder_b_pin: "19"
  rotary_encoder_button_pin: "2" # RTC
  battery_voltage_pin: "3" # ADC1
  charging_pin: "5" # RTC
  fully_charged_pin: "7"
  sda_pin: "8"
  scl_pin: "9"
  timezone: "<+06>-6"
  timer_list_sound: "id(timer_1_sound), id(timer_2_sound), id(timer_3_sound), id(timer_4_sound), id(timer_5_sound), id(timer_6_sound), id(timer_7_sound), id(timer_8_sound)"
  timer_list: "id(timer_1_timer), id(timer_2_timer), id(timer_3_timer), id(timer_4_timer), id(timer_5_timer), id(timer_6_timer), id(timer_7_timer), id(timer_8_timer)"
  signal_list_sound: "id(signal_1_sound), id(signal_2_sound), id(signal_3_sound), id(signal_4_sound), id(signal_5_sound), id(signal_6_sound), id(signal_7_sound), id(signal_8_sound)"
  signal_list: "id(signal_1_daily_signal), id(signal_2_daily_signal), id(signal_3_daily_signal), id(signal_4_daily_signal), id(signal_5_daily_signal), id(signal_6_daily_signal), id(signal_7_daily_signal), id(signal_8_daily_signal)"
  menu_text_back: "НАЗА"

esphome:
  name: kitchen-timer
  friendly_name: kitchen_timer
  includes:
    - kitchen-timer.h
  platformio_options:
    board_build.f_cpu: 80000000L
    debug_tool: esp-builtin
    lib_ldf_mode: "chain+"
    # build_type: debug
    monitor_filters: esp32_exception_decoder
    board_build.flash_mode: dio
    # extra_scripts:
    #   - pre:../../../extra_script.py
  project: 
    name: "asergunov.kitchen-timer"
    version: "0.0.1"
  on_boot:
    priority: 1000
    then:
      - deep_sleep.prevent: deep_sleep_component
      - number.set: 
          id: display_intensity_number
          value: !lambda return 0.0f;
      - lambda: |
          #if ESP_IDF_VERSION_MAJOR >= 5
            esp_task_wdt_config_t wdtc;
            wdtc.idle_core_mask = 0;
            wdtc.timeout_ms = 1500;
            wdtc.trigger_panic = true;
          esp_task_wdt_reconfigure(&wdtc);
          #else
            esp_task_wdt_init(1500, true);
          #endif
      - lambda: |
          setenv("TZ", "${timezone}", 1);
          tzset();
      - globals.set:
          id: sleep_back
          value: !lambda |
            return esp_sleep_get_wakeup_cause() != ESP_SLEEP_WAKEUP_GPIO;
      - lambda: |
          const auto& names = get_song_name_list(id(songs));
          for(auto&& select: {
            ${signal_list_sound}, 
            ${timer_list_sound}
          }) {
            select->traits.set_options(names);
            select->set_initial_option(names[0]);
          }
      # - lambda: |
      #     App.set_loop_interval(100);
      - script.execute: update_display_loop
      - if:
          condition:
            - lambda: return esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_GPIO;
          then:
            - script.execute: play_battery_animation

globals:
  - id: sleep_back
    type: bool
    initial_value: "false"
  - id: ota_progress
    type: float
    initial_value: "NAN"
  # - id: playing_battery_animation_frame
  #   type: uint8_t
  #   initial_value: "0"
  - id: signal_stop_request
    type: bool
    initial_value: "false"
  - id: signal_message
    type: std::vector<std::string>
  - id: signal_song_index
    type: size_t
    initial_value: "static_cast<size_t>(-1)"
  - id: time_sync_in_progress
    type: bool
    initial_value: "false"
  - id: frame
    type: uint8_t
    initial_value: "0"
api:
  encryption:
    key: !secret kitchen_timer.api.encryption

ota:
  password: !secret kitchen_timer.ota.password
  on_begin:
    then:
      - switch.turn_off: power_saving
      - rtttl.stop:
      - globals.set: 
          id: ota_progress
          value: !lambda return 0;
  on_error:
    then:
      - switch.turn_on: power_saving
      - globals.set: 
          id: ota_progress
          value: !lambda return NAN;
  on_progress: 
    then:
      - rtttl.stop:
      - globals.set: 
          id: ota_progress
          value: !lambda return x;
      - component.update: tm1637_display          

packages:
  rtttl: !include ./kitchen-timer/rtttl.yaml
  debug: !include ./kitchen-timer/debug.yaml
  sntp: !include ./kitchen-timer/sntp.yaml
  rotary_encoder: !include ./kitchen-timer/rotary_encoder.yaml
  wifi: !include ./kitchen-timer/wifi.yaml 
  menu: !include ./kitchen-timer/menu.yaml
  power: !include ./kitchen-timer/power.yaml
  wireguard: !include ./kitchen-timer/wireguard.yaml
  web_server: !include ./kitchen-timer/web_server.yaml
  signal1: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 1
  signal2: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 2
  signal3: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 3
  signal4: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 4
  signal5: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 5
  signal6: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 6
  signal7: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 7
  signal8: !include
    file: ./kitchen-timer/signal.yaml
    vars:
      index: 8
  timer1: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 1
  timer2: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 2
  timer3: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 3
  timer4: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 4
  timer5: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 5
  timer6: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 6
  timer7: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 7
  timer8: !include
    file: ./kitchen-timer/timer.yaml
    vars:
      index: 8

deep_sleep:
  id: deep_sleep_component
  run_duration: 1000ms
  sleep_duration: 5000ms
  
switch:
  - platform: template
    optimistic: True
    name: Display Flip
    entity_category: CONFIG
    id: display_flip
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |
            id(tm1637_display).set_inverted(true);
        - component.update: tm1637_display
    on_turn_off:
      then:
        - lambda: |
            id(tm1637_display).set_inverted(false);
        - component.update: tm1637_display
  - platform: template
    id: sound_tick_switch
    name: Sound Second Tick
    optimistic: True
    entity_category: CONFIG
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    id: sound_menu_switch
    name: Sound Menu
    optimistic: True
    entity_category: CONFIG
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    id: sound_timer_tick_switch
    name: Sound Timer Tick
    optimistic: True
    entity_category: CONFIG
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    id: online_on_battery
    name: Server on Battery
    optimistic: True
    entity_category: CONFIG
    restore_mode: RESTORE_DEFAULT_OFF

i2c:
  - sda: $sda_pin
    scl: $scl_pin

script:
  - id: deep_sleep_start
    mode: single
    then:
      - lambda: |
          id(tm1637_display).update();
      - wait_until:
          condition:
            - binary_sensor.is_off: encoder_button
      - lambda: |
          if(id(play_signal).is_running()) {
            ESP_LOGD(TAG, "Can't sleep. Signal is running");
            return;
          }
          id(tm1637_display).set_on(false);
          id(tm1637_display).display();
          id(tm1637_display).update();
          auto result = esp_sleep_disable_wakeup_source(ESP_SLEEP_WAKEUP_ALL);
          if(result != ESP_OK) {
            ESP_LOGE(TAG, "Can't disable timer wakeup sources, error: %d", result);
            return;
          }
          
          optional<uint32_t> smallest_timer = closest_timer_il({${timer_list}});
          optional<uint32_t> smallest_signal = closest_timer_il({${signal_list}});
          const auto& smallest = [&]() -> optional<uint32_t> {
            if(smallest_timer && smallest_signal)
              return std::min(*smallest_signal, *smallest_timer);
            if(smallest_timer)
              return smallest_timer;
            return smallest_signal;
          }();
  
          if(smallest) {
            result = esp_sleep_enable_timer_wakeup(*smallest * 1000 * 1000);
            if(result != ESP_OK) {
              ESP_LOGE(TAG, "Can't enable timer wakeup, error: %d", result);
              return;
            }
          }

          uint64_t mask = (1 << $rotary_encoder_button_pin);
          if(id(ac_powered).state == false) {
            ESP_LOGI(TAG, "Battery powered, will wake up on power up");
            mask |= (1 << $charging_pin);
          }

          result = esp_deep_sleep_enable_gpio_wakeup(mask, ESP_GPIO_WAKEUP_GPIO_LOW);
          if(result != ESP_OK) {
            ESP_LOGE(TAG, "enable deep seep GPIO wake up, error: %d", result);
            return;
          }

          App.run_safe_shutdown_hooks();
          esp_deep_sleep_start();
      - lambda: |
          id(tm1637_display).set_on(true);
          id(tm1637_display).display();
          id(tm1637_display).update();
  - id: play_signal
    mode: queued
    then:
      - lambda: |
          const auto item = alarms::pop();
          id(signal_song_index) = item ? item->song_index : static_cast<size_t>(-1);
          id(signal_message) = item ? std::move(item->message) : std::vector<std::string>();
          id(signal_stop_request) = false;

          if(id(signal_song_index) > id(songs).size()) {
            if(id(sleep_back)) {
              ESP_LOGI(TAG, "Was sleeping. Sleep again");
              id(play_signal).stop();
              id(deep_sleep_start).execute();
            }
          } else {
            ESP_LOGI(TAG, "Starting to play song %d", id(signal_song_index));
            // schedule another song play
            id(play_signal).execute();
            const auto& messages = id(signal_message).size();
            if(messages > 0) {
              id(frame) += messages * 2;
              id(frame) -= id(frame) % (messages * 2);
            }
          }        
      - if:
          condition:
            - lambda: |
                return id(signal_song_index) < id(songs).size();
          then:
            - wait_until:
                condition:
                  - lambda:
                      return id(signal_stop_request);
                timeout: !lambda return id(alarm_timeout).state * 1000 * 60;
            - lambda: |
                ESP_LOGD(TAG, "Stop playing signal %d", id(signal_song_index));
                id(signal_song_index) = static_cast<size_t>(-1);
                id(signal_message).clear();
            - rtttl.stop:
  - id: tick_sound
    mode: single
    then:
      - if:
          condition:
            or:
              - switch.is_on: sound_tick_switch
              - lambda: |
                  const std::vector<esphome::timer::TimerComponent*> timer_list{$timer_list};
                  auto i = std::find_if(timer_list.begin(), timer_list.end(), [](esphome::timer::TimerComponent* timer){
                    return !!timer->get_seconds_remain();
                  });
                  return i != timer_list.end();
          then:
            - if:
                condition:
                  or:
                    - script.is_running: deep_sleep_start
                    - rtttl.is_playing:
                then:
                  - delay: 2ms
                else:
                  - delay: 1ms
                  - output.set_level:
                      id: rtttl_out
                      level: "100%"
                  - delay: 1ms
                  - output.set_level:
                      id: rtttl_out
                      level: "0%"
  - id: update_display_loop
    then:
      - while:
          condition:
            - lambda: return true;
          then:
            - if:
                condition:
                  - lambda: return clock_updater.can_update();
                then:
                  - logger.log:
                      level: DEBUG
                      format: Updating screen
                  - script.execute: tick_sound
                  - lambda: |
                      ++id(frame);
                      clock_updater.mark_updated();
                  - logger.log:
                      level: DEBUG
                      format: Frame is %d.
                      args:
                        - id(frame)
                  - component.update: tm1637_display
                  - wait_until:
                      condition:
                        not:
                          - script.is_running: tick_sound
                  - lambda: |
                      ESP_LOGD(TAG, "Checking the song");
                      const auto& song_index = id(signal_song_index);
                      if(song_index < id(songs).size() && !id(my_rtttl).is_playing()) {
                        ESP_LOGD(TAG, "Start song playing");
                        id(my_rtttl).play(id(songs)[song_index]);
                      }
            - delay: 1ms # to process other sensor loops
            - if:
                condition:
                  and:
                    - binary_sensor.is_off: encoder_button
                    - binary_sensor.is_off: wifi_required
                    - not:
                        display_menu.is_active:
                    - not:
                        - script.is_running: play_signal
                    - not:
                        - script.is_running: play_battery_animation
                then:
                  - lambda: |
                      ESP_LOGD(TAG, "Light sleep attempt");
                      static const auto wake_pins = std::initializer_list<gpio_num_t>{ 
                        gpio_num_t($rotary_encoder_button_pin),
                        gpio_num_t($charging_pin),
                        };

                      static const auto encoder_pins = std::initializer_list<gpio_num_t>{ 
                        // gpio_num_t($rotary_encoder_a_pin), 
                        // gpio_num_t($rotary_encoder_b_pin), 
                      };

                      // InterruptLock lock;

                      for(const auto& gpio: wake_pins) {
                        if(0 == gpio_get_level(gpio)) {
                          ESP_LOGD(TAG, "GPIO %d is low. Don't sleep", gpio);
                          return;
                        }
                      }

                      for(const auto& gpio: encoder_pins) {
                        if(0 == gpio_get_level(gpio)) {
                          ESP_LOGD(TAG, "Encoder GPIO %d is low. Don't sleep", gpio);
                          return;
                        }
                      }

                      const auto to_sleep = clock_updater.useconds_to_update();
                      ESP_LOGD(TAG, "To sleep calculates as %lldus", to_sleep);
                      if(to_sleep < 15*1000) {
                        ESP_LOGD(TAG, "To short to sleep");
                        return;
                      }

                      ESP_LOGD(TAG, "Enabling timer wakeup");
                      auto result = esp_sleep_enable_timer_wakeup(to_sleep);
                      if(result != ESP_OK) {
                        ESP_LOGE(TAG, "Can't setup wake timer for %" PRId64 "us, error: %d", to_sleep, result);
                        return;
                      }

                      ESP_LOGD(TAG, "Enabling GPIO wakeup");
                      for(const auto& gpio: wake_pins) {
                        result = gpio_wakeup_enable(gpio, GPIO_INTR_LOW_LEVEL);
                        if(ESP_OK != result) {
                          ESP_LOGE(TAG, "Can't enable gpio wake source %d, error: %d", gpio, result);
                        }
                      }

                      for(const auto& gpio: encoder_pins) {
                        result = gpio_intr_disable(gpio);
                        if(ESP_OK != result) {
                          ESP_LOGE(TAG, "Can't disable gpio interrupt %d, error: %d", gpio, result);
                        }
                        result = gpio_wakeup_enable(gpio, GPIO_INTR_LOW_LEVEL);
                        if(ESP_OK != result) {
                          ESP_LOGE(TAG, "Can't enable gpio wake source %d, error: %d", gpio, result);
                        }
                      }

                      result = esp_sleep_enable_gpio_wakeup();
                      if(ESP_OK != result) {
                        ESP_LOGE(TAG, "Can't enable gpio wakeup, error %d", result);
                      }
                      // App.run_safe_shutdown_hooks();
                      // adc_power_off();
                      // id(tm1637_display).stop_poller();
                      // ESP_LOGD(TAG, "Starting light sleep");
                      result = esp_light_sleep_start();
                      esp_task_wdt_reset();
                      
                      for(const auto& gpio: wake_pins) {
                        const auto result = gpio_wakeup_disable(gpio);
                        if(ESP_OK != result) {
                          ESP_LOGE(TAG, "Can't disable gpio wake source %d, error: %d", gpio, result);
                        }
                      }

                      ESP_LOGD(TAG, "Enabling GPIO interrupts");
                      for(const auto& gpio: encoder_pins) {
                        const auto result = gpio_intr_enable(gpio);
                        if(ESP_OK != result) {
                          ESP_LOGE(TAG, "Can't disable gpio interrupt %d, error: %d", gpio, result);
                        }
                      }

                      switch(result) {
                        case ESP_ERR_SLEEP_TOO_SHORT_SLEEP_DURATION:
                          ESP_LOGE(TAG, "Can't start sleep: duration to short");
                          break;
                        case ESP_ERR_SLEEP_REJECT:
                          ESP_LOGE(TAG, "Can't start sleep: sleep reject");
                          break;
                        case ESP_OK:
                          ESP_LOGD(TAG, "Woke up");
                          switch(esp_sleep_get_wakeup_cause()) {
                            case ESP_SLEEP_WAKEUP_GPIO:
                              ESP_LOGI(TAG, "Wake cause is GPIO");
                              id(encoder_button)->loop();
                              ESP_LOGI(TAG, "encoder_button: %d", int(id(encoder_button).state));
                              id(charging_sensor)->loop();
                              ESP_LOGI(TAG, "charging_sensor: %d", int(id(charging_sensor).state));
                              id(fully_charged)->loop();
                              ESP_LOGI(TAG, "fully_charged: %d", int(id(fully_charged).state));
                              id(ac_powered)->loop();
                              ESP_LOGI(TAG, "ac_powered: %d", int(id(ac_powered).state));
                              break;
                            case ESP_SLEEP_WAKEUP_TIMER:
                              ESP_LOGD(TAG, "Wake cause is a Timer");
                              break;
                            default:
                              ESP_LOGW(TAG, "Unexpected wake cause %d", esp_sleep_get_wakeup_cause());
                              break;
                          }
                          break;
                        default:
                          ESP_LOGE(TAG, "Can't start sleep: error %d", result);
                          break;
                      }
                      // id(tm1637_display).start_poller();
                  - component.update: light_sensor
                  - lambda: |
                      // It takes more then one loop to update sensor
                      for(int i = 0; i<5; ++i)
                        id(light_sensor).loop();
                else:
                  - delay: !lambda "return clock_updater.useconds_to_update()/1000.;"
  - id: play_battery_animation
    then:
      - component.update: light_sensor
      - component.update: battery_voltage_unfiltered
      - component.update: tm1637_display
      - number.set: 
          id: display_intensity_number
          value: !lambda return 1.f;
      - delay: 20ms
      - number.set: 
          id: display_intensity_number
          value: !lambda |
            const auto& x = id(display_intensity).state;
            const auto& out = x < 0 ? id(desired_display_intensity).state : x;
            return std::min(out, 1.0f);
      - component.update: light_sensor
      - component.update: battery_voltage_unfiltered
      - component.update: tm1637_display
      - delay: 40ms
      - number.set: 
          id: display_intensity_number
          value: !lambda |
            const auto& x = id(display_intensity).state;
            const auto& out = x < 0 ? id(desired_display_intensity).state : x;
            return std::min(out, 2.0f);
      - component.update: light_sensor
      - component.update: battery_voltage_unfiltered
      - component.update: tm1637_display
      - delay: 80ms
      - number.set: 
          id: display_intensity_number
          value: !lambda |
            const auto& x = id(display_intensity).state;
            const auto& out = x < 0 ? id(desired_display_intensity).state : x;
            return std::min(out, 4.0f);
      - component.update: light_sensor
      - component.update: battery_voltage_unfiltered
      - component.update: tm1637_display
      - delay: 160ms
      - number.set: 
          id: display_intensity_number
          value: !lambda |
            const auto& x = id(display_intensity).state;
            const auto& out = x < 0 ? id(desired_display_intensity).state : x;
            return std::min(out, 6.0f);
      - component.update: light_sensor
      - component.update: battery_voltage_unfiltered
      - component.update: tm1637_display
      - delay: 320ms
      - number.set: 
          id: display_intensity_number
          value: !lambda |
            const auto& x = id(display_intensity).state;
            return x < 0 ? id(desired_display_intensity).state : x;
      # - globals.set: 
      #     id: playing_battery_animation_frame
      #     value: !lambda return 1;
      # - component.update: light_sensor
      # - component.update: battery_voltage_unfiltered
      # - delay: 10ms
      # - component.update: light_sensor
      # - component.update: battery_voltage_unfiltered
      # - delay: 10ms
      # - component.update: light_sensor
      # - component.update: battery_voltage_unfiltered
      # - globals.set: 
      #     id: playing_battery_animation_frame
      #     value: !lambda return 0;
      # - delay: 10ms
      # - component.update: light_sensor
      # - component.update: battery_voltage_unfiltered
      # - delay: 10ms
      # - component.update: light_sensor
      # - component.update: battery_voltage_unfiltered
      # - while:
      #     condition: 
      #       - lambda: |
      #           const auto& percentage = id(battery_percentage).state;
      #           return id(playing_battery_animation_frame) < 1 + (isnan(percentage) ? 0.0f : percentage)*15.f/100.f;
      #     then:
      #       - lambda: |
      #           id(playing_battery_animation_frame)++;
      #       - component.update: tm1637_display
      #       - delay: 10ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - component.update: tm1637_display
      # - delay: 50ms
      # - globals.set: 
      #     id: playing_battery_animation_frame
      #     value: !lambda return 0;
      - component.update: tm1637_display

sensor:
  # - platform: template
  #   name: Freq RTC Slow
  #   entity_category: DIAGNOSTIC
  #   update_interval: 5s
  #   device_class: duration
  #   unit_of_measurement: Hz
  #   lambda: |
  #     uint32_t result;
  #     if(ESP_OK != esp_clk_tree_src_get_freq_hz(SOC_MOD_CLK_RTC_SLOW, ESP_CLK_TREE_SRC_FREQ_PRECISION_CACHED, &result))
  #       return NAN;
  #     return result;
  - platform: veml7700
    id: light_sensor
    address: 0x10
    update_interval: 0.5s
    auto_mode: False
    # short variant of sensor definition:
    ambient_light:
      id: ambient_light_sensor_fast
      name: Light Ambient Fast
      internal: True
    # ambient_light_counts: 
    #   name: Light Ambient Counts
    #   entity_category: diagnostic
    #   filters:
    #     - throttle: 5s

    infrared:
      name: Light Infrared
      entity_category: diagnostic
      filters:
        - throttle: 5s
    full_spectrum:
      name: Light Full Spectrum
      entity_category: diagnostic
      filters:
        - throttle: 5s
    # full_spectrum_counts: 
    #   name: Light Full Spectrum Counts
    #   entity_category: diagnostic
    #   filters:
    #     - throttle: 5s
    # actual_integration_time:
    #   name: Light Integration Time
    #   entity_category: diagnostic
    #   filters:
    #     - throttle: 5s
    # actual_gain:
    #   name: Light Gain
    #   entity_category: diagnostic
    #   filters:
    #     - throttle: 5s

  - platform: copy
    name: Light Ambient
    entity_category: diagnostic
    source_id: ambient_light_sensor_fast
    filters:
      - throttle: 5s

  - platform: copy
    source_id: ambient_light_sensor_fast
    id: desired_display_intensity
    internal: True
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 0 -> 0.
            - 10 -> 0.
            - 80 -> 1.
            - 140 -> 2.
            - 300 -> 3.
            - 2000 -> 7.
      - lambda: "return ceil(x);"
      - clamp:
          max_value: 7
          min_value: 0
    on_value:
      then:
        - if:
            condition:
              - number.in_range: 
                  id: display_intensity
                  below: -0.5
            then:
              - number.set:
                  id: display_intensity_number
                  value: !lambda return x;

binary_sensor:      
  - platform: template
    id: wifi_required
    lambda: |
      return id(online_on_battery).state || id(ac_powered).state || kitchen_timer::sntp::force_sync_scheduled;
    on_press: 
      then:
        - wifi.enable: 
    on_release: 
      then:
        - wifi.disable:

button:
  - platform: restart
    name: Restart device
    entity_category: config
  - platform: template
    name: Deep sleep
    entity_category: config
    on_press:
      then:
        - script.execute: deep_sleep_start

number:
  - platform: template
    id: alarm_timeout
    name: Alarm Timeout
    entity_category: config
    min_value: 1
    max_value: 15
    step: 1
    unit_of_measurement: min
    optimistic: True
    restore_value: True
    initial_value: 5

  - platform: template
    name: Display Intensity
    entity_category: CONFIG
    id: display_intensity
    max_value: 7
    min_value: -1
    step: 1
    update_interval: 1s
    optimistic: True
    restore_value: True
    set_action:
      then:
        - number.set: 
            id: display_intensity_number
            value: !lambda |
              return x < 0 ? id(desired_display_intensity).state : x;
  - platform: template
    name: Raw Display Intensity
    id: display_intensity_number
    max_value: 7
    min_value: -1
    step: 1
    update_interval: 1s
    optimistic: True
    entity_category: CONFIG
    internal: true
    set_action:
      then:
        - lambda: |
            id(tm1637_display).set_on(int(x) != -1);
            id(tm1637_display).set_intensity(max(0, int(x)));
            id(tm1637_display).update();

lcd_menu_7segment:
  items:
    - text: $menu_text_back
      type: command
      on_value:
        then:
          - display_menu.hide:
          - component.update: tm1637_display
display:
  platform: tm1637
  id: tm1637_display
  clk_pin: ${display_clk_pin}
  dio_pin: ${display_dio_pin}
  inverted: false
  length: 4
  update_interval: never
  intensity: 7
  lambda: |-
    if(!isnan(id(ota_progress))) {
      it.printf("U%3.0f", id(ota_progress));
      return;
    }

    auto display_battery = [&it]{
      if(isnan(kitchen_timer::last_battery_percentage)) {
        it.printf("Б --");
        return;
      }
      it.printf("Б%3.0f", kitchen_timer::last_battery_percentage);
    };

    if(id(play_battery_animation).is_running()) {
      display_battery();
      return;

      // char buff[5] = {0,0,0,0,0};
      // char sym[4] = {' ', '_', 'o', 'O'};
      // auto remains = id(playing_battery_animation_frame);
      // for(int i = 0; i<4; ++i) {
      //   buff[i] = sym[std::min(uint8_t(3), remains)];
      //   remains-=std::min(remains, uint8_t(3));
      // }
      // it.printf("%s", buff);
      // return;
    }

    if(!id(signal_message).empty()) {
      // it.set_on(true);
      ESP_LOGD(TAG, "Figuring out the message");
      const auto& message = id(signal_message)[id(frame) % id(signal_message).size()];
      ESP_LOGD(TAG, "Showing message %s", message.c_str());
      it.printf("%s", message.c_str());
      return;
    }

    if (id(menu).is_active()) {
      // it.set_on(true);
      ESP_LOGD(TAG, "Drawing menu");
      id(menu).draw();
      return;
    }

    if(id(encoder_button).state) {
      if(id(deep_sleep_start).is_running())
        it.print("   ");
      else
        display_battery();
      return;
    }

    // ESP_LOGD(TAG, "Looking for closest timer");
    // optional<uint32_t> smallest_timer = closest_timer_il({${timer_list}});

    // if(smallest_timer) {
    //   ESP_LOGD(TAG, "Showing timer %d", *smallest_timer);
    //   it.printf("%s", timer_value_string(*smallest_timer).c_str());
    //   return;
    // }

    if(id(frame ) % 2) {
      if(!isnan(kitchen_timer::last_battery_percentage)) {
        if(id(charging_sensor).state 
          ? kitchen_timer::last_battery_percentage > 99.f || 
              (kitchen_timer::last_battery_percentage > 80.f && 0 == id(frame)/2 % 2) ||
              (kitchen_timer::last_battery_percentage < 50.f && 0 == id(frame)/2 % 4) ||
              (kitchen_timer::last_battery_percentage < 30.f && 0 == id(frame)/2 % 8) ||
              (kitchen_timer::last_battery_percentage < 20.f && 0 == id(frame)/2 % 16) ||
              (kitchen_timer::last_battery_percentage < 10.f && 0 == id(frame)/2 % 32) ||
              (kitchen_timer::last_battery_percentage <  5.f && 0 == id(frame)/2 % 64)
          : kitchen_timer::last_battery_percentage < 3.f || 
              (kitchen_timer::last_battery_percentage <  5.f && 0 == id(frame)/2 % 2) ||
              (kitchen_timer::last_battery_percentage < 10.f && 0 == id(frame)/2 % 4) ||
              (kitchen_timer::last_battery_percentage < 20.f && 0 == id(frame)/2 % 8) ||
              (kitchen_timer::last_battery_percentage < 30.f && 0 == id(frame)/2 % 16) ||
              (kitchen_timer::last_battery_percentage < 50.f && 0 == id(frame)/2 % 32) ||
              (kitchen_timer::last_battery_percentage < 80.f && 0 == id(frame)/2 % 64))
          
        {
            it.printf("Б%3.0f", kitchen_timer::last_battery_percentage);
            return;
        }
      }

      auto && wifi = id(wifi_component);
      if(!wifi->is_disabled() && !wifi->is_connected()) {
          it.print("WIFI");
          return;
      }

      if (kitchen_timer::sntp::force_sync_scheduled) {
        it.print("sntp");
        return;
      }

      if(!wifi->is_disabled() && !id(ac_powered).state) {
        it.print("СЕРВ");
        return;
      }
    }

    ESP_LOGD(TAG, "Showing current time");
    const auto now = id(sntp_component).now();
    if(now.is_valid())
      it.strftime((id(frame) % 2) == 0 ? "%H.%M": "%H%M", now);
    else
      it.print("----");